// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AnswerField struct {
	StudentAnswer *string `json:"studentAnswer,omitempty"`
	TrueAnswer    string  `json:"trueAnswer"`
	IsTrue        *bool   `json:"isTrue,omitempty"`
}

type Collection struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Questions string `json:"questions"`
	CreatedAt string `json:"createdAt"`
	IsActive  bool   `json:"isActive"`
}

type Group struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	TeacherName string     `json:"teacherName"`
	Level       GroupLevel `json:"level"`
	StartAt     string     `json:"start_at"`
	StartedDate string     `json:"started_date"`
	DaysWeek    DaysWeek   `json:"days_week"`
	CreatedAt   string     `json:"createdAt"`
}

type Mutation struct {
}

type Query struct {
}

type Response struct {
	StatusCode int    `json:"statusCode"`
	Message    string `json:"message"`
}

type Student struct {
	FullName    string `json:"fullName"`
	PhoneNumber string `json:"phoneNumber"`
	ID          string `json:"id"`
}

type UserCollectionTestExams struct {
	CollectionID string         `json:"collectionId"`
	AnswerField  []*AnswerField `json:"answerField"`
	RequestGroup []*Group       `json:"requestGroup,omitempty"`
	TrueCount    *int           `json:"trueCount,omitempty"`
	FalseCount   *int           `json:"falseCount,omitempty"`
	CreatedAt    string         `json:"createdAt"`
}

type DaysWeek string

const (
	DaysWeekEvenDays DaysWeek = "EVEN_DAYS"
	DaysWeekOddDays  DaysWeek = "ODD_DAYS"
	DaysWeekCustom   DaysWeek = "CUSTOM"
)

var AllDaysWeek = []DaysWeek{
	DaysWeekEvenDays,
	DaysWeekOddDays,
	DaysWeekCustom,
}

func (e DaysWeek) IsValid() bool {
	switch e {
	case DaysWeekEvenDays, DaysWeekOddDays, DaysWeekCustom:
		return true
	}
	return false
}

func (e DaysWeek) String() string {
	return string(e)
}

func (e *DaysWeek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DaysWeek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DaysWeek", str)
	}
	return nil
}

func (e DaysWeek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupLevel string

const (
	GroupLevelBeginner          GroupLevel = "BEGINNER"
	GroupLevelElementary        GroupLevel = "ELEMENTARY"
	GroupLevelPreIntermediate   GroupLevel = "PRE_INTERMEDIATE"
	GroupLevelIntermediate      GroupLevel = "INTERMEDIATE"
	GroupLevelUpperIntermediate GroupLevel = "UPPER_INTERMEDIATE"
	GroupLevelAdvanced          GroupLevel = "ADVANCED"
	GroupLevelProficient        GroupLevel = "PROFICIENT"
)

var AllGroupLevel = []GroupLevel{
	GroupLevelBeginner,
	GroupLevelElementary,
	GroupLevelPreIntermediate,
	GroupLevelIntermediate,
	GroupLevelUpperIntermediate,
	GroupLevelAdvanced,
	GroupLevelProficient,
}

func (e GroupLevel) IsValid() bool {
	switch e {
	case GroupLevelBeginner, GroupLevelElementary, GroupLevelPreIntermediate, GroupLevelIntermediate, GroupLevelUpperIntermediate, GroupLevelAdvanced, GroupLevelProficient:
		return true
	}
	return false
}

func (e GroupLevel) String() string {
	return string(e)
}

func (e *GroupLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupLevel", str)
	}
	return nil
}

func (e GroupLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
